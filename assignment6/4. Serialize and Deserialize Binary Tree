public class Codec {
    StringBuilder sb = new StringBuilder();
    
    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if(root == null) {
            return "null";
        }

        dfs(root);
        return sb.toString();
    }

    public void dfs(TreeNode root){
        if(root == null) {
            sb.append("null,");
            return;
        }else{
            sb.append(root.val + ",");
        }
        dfs(root.left);
        dfs(root.right);
    }
    
    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        String[] arr = data.split(",");
        Queue <String> queue = new LinkedList<>();
        for(int i = 0; i < arr.length; i++){
            queue.offer(arr[i]);
        }
        TreeNode root = buildTree(queue);
        return root;
    }
    
    public TreeNode buildTree(Queue<String> queue){
        String str = queue.poll();
        
        if(str.equals("null")){
            return null;
        }

        TreeNode root = new TreeNode(Integer.parseInt(str));

        root.left = buildTree(queue);  
        root.right = buildTree(queue);
        
        return root;
    }


}
