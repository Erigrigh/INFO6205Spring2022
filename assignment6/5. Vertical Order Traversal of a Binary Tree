class Solution {
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        List<List<Integer>> result = new LinkedList<>(new LinkedList<>());
        Map<Integer, TreeMap<Integer,List<Integer>>> lieInfo = new TreeMap<>();
        
        getPosition(root, 0, 0, lieInfo);

        Set<Map.Entry<Integer, TreeMap<Integer, List<Integer>>>> entrySet =lieInfo.entrySet();
        
        entrySet.forEach((a)->{
            List<Integer> getOne = new LinkedList<>();
            for (Map.Entry<Integer, List<Integer>> entry : a.getValue().entrySet()) {
                Integer m = entry.getKey();
                List<Integer> n = entry.getValue();
                List<Integer> samePos = n;
                Collections.sort(samePos);

                getOne.addAll(samePos);

            }
            result.add(getOne);
        });
        
        
        return result;
    }

    private void getPosition(TreeNode root, int lie, int hang, Map<Integer, TreeMap<Integer,List<Integer>>>  lieInfo) {
        if(root == null) return;
        
        lieInfo.putIfAbsent(lie, new TreeMap<>());
        
        lieInfo.get(lie).putIfAbsent(hang, new ArrayList<>());
        lieInfo.get(lie).get(hang).add(root.val);
        
        getPosition(root.left,lie - 1, hang + 1, lieInfo);
        getPosition(root.right,lie + 1, hang + 1, lieInfo);


    }
}
